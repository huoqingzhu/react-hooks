[{"/Users/huo/Desktop/react/hook-ts-demo/src/index.tsx":"1","/Users/huo/Desktop/react/hook-ts-demo/src/reportWebVitals.ts":"2","/Users/huo/Desktop/react/hook-ts-demo/src/App.tsx":"3","/Users/huo/Desktop/react/hook-ts-demo/src/view/example.tsx":"4","/Users/huo/Desktop/react/hook-ts-demo/src/view/Counter.tsx":"5","/Users/huo/Desktop/react/hook-ts-demo/src/hooks/useFriendStatus.ts":"6","/Users/huo/Desktop/react/hook-ts-demo/src/view/tab.tsx":"7"},{"size":500,"mtime":1610603859474,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1610603859474,"results":"10","hashOfConfig":"9"},{"size":858,"mtime":1610975534788,"results":"11","hashOfConfig":"9"},{"size":515,"mtime":1610614649490,"results":"12","hashOfConfig":"13"},{"size":7334,"mtime":1610980530352,"results":"14","hashOfConfig":"9"},{"size":555,"mtime":1610632125155,"results":"15","hashOfConfig":"9"},{"size":909,"mtime":1610855880773,"results":"16","hashOfConfig":"9"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"vr6d3n",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qfxjfn",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"19"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"/Users/huo/Desktop/react/hook-ts-demo/src/index.tsx",[],["35","36"],"/Users/huo/Desktop/react/hook-ts-demo/src/reportWebVitals.ts",[],"/Users/huo/Desktop/react/hook-ts-demo/src/App.tsx",["37"],"import React,{createContext} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {Counter,User,FriendStatus,CounterReducer,CounterRef,Example,UseRefDemof} from \"./view/Counter\"\nimport {Tab} from \"./view/tab\"\n// user 组件\n// 计数组件\nconst counter=<Counter initial={30}></Counter>\n// const CountContext = createContext(123)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      {/* 计数组件 */}\n      {counter}\n      {/* 对象类型*/}\n      \n      <CounterReducer ></CounterReducer>\n      <User></User>\n      <CounterRef></CounterRef>\n      <FriendStatus id={123}></FriendStatus>\n      {/* <CountContext.Provider value={isOnline}>\n      </CountContext.Provider> */}\n      <Example/>\n      <UseRefDemof />\n      <Tab></Tab>\n      </header>\n\n    </div>\n  );\n}\n\nexport default App;\n","/Users/huo/Desktop/react/hook-ts-demo/src/view/example.tsx",[],"/Users/huo/Desktop/react/hook-ts-demo/src/view/Counter.tsx",["38"],"import { spawn } from 'child_process';\nimport React, { useState,useEffect,createContext,useContext,useReducer,useRef,useMemo,useCallback, SFC} from 'react'\nimport '../App.css';\nimport useFriendStatus from \"../hooks/useFriendStatus\"\n// 标题组件\nconst Title:React.FC<{title:string}>=({title=\"我是标题\"})=>{\n    return (\n      <div className=\"title\">\n        {title}\n      </div>\n    )\n}\n/**\n * 计数器组件\n * @param param0 \n */\nconst Counter:React.FC<{ initial: number }> = ({ initial = 0 }) => {\n  const [count, setCount] = useState<number>(initial)\n  const add=(value:number)=>{\n        setCount(count+value)\n      }\n  return (\n    <div className=\"component\">\n      <Title title=\"计数器组件useState\" />\n      <p>父组件传给我的值: {count}</p>\n      <button onClick={(e)=>{add(30)}}>加</button>\n      <button onClick={() => setCount(count-10)}>减</button>\n    </div>\n  )\n}\n\n/**\n * useState对象组件\n * @param param0 \n */\ntype ArticleInfo = {\n  title: string,\n  content: string\n}\nconst Article:React.FC<ArticleInfo> = ({ title, content }) => {\n  const [article, setArticle] = useState<ArticleInfo>({ title, content })\n  return (\n    <div className=\"component\">\n      <Title title=\"useState\b对象组件\" />\n      <p>Title: { article.title }</p>\n      <section>{ article.content }</section>\n      <button onClick={() => setArticle({\n        title: '下一篇',\n        content: '下一篇的内容',\n      })}>\n        下一篇\n      </button>\n    </div>\n  )\n}\n/**\n * useReducer组件\n */\nconst User = () => {\n  type StateType = {\n    count: number,\n    name:string\n  }\n  type ActionType = {\n    type: 'add' | 'reduce' \n    count: number,\n    name?:string\n  }\n  const initialState = { count: 0,name:\"运算\" }\n\n  function reducer(state: StateType, action: ActionType) {\n    switch (action.type) {\n      case 'add':\n        return { name:\"正在进行加法计算\", count: state.count + action.count }\n      case 'reduce':\n        return { name:\"正在进行减法计算\", count: state.count - action.count, }\n      default:\n        return state\n    }\n  }\n\n  const [state, dispatch] = useReducer(reducer,initialState)\n  useEffect(()=>{\n    console.log(\"我执行了00000\")\n  },[state.name])\n\n  return (\n    <div className=\"component\">\n      <Title title=\"useEffect组件\"/>\n      <p> Count: {state.count}</p>\n      <p>Name:{state.name}</p>\n      <button onClick={() => dispatch({type: 'add',count:20})}>-</button>\n      <button onClick={() => dispatch({type: 'reduce',count:10})}>+</button>\n    </div>\n  );\n}\n\nconst CountContext = createContext(false)\n// useContext 组件\nfunction Counters(){\n  const count = useContext(CountContext)    //一句话就可以得到count\n  useEffect(()=>{\n    console.log(count+\"变化了\")\n  },[count])\n  return (<div className=\"online\">\n    {count?\"useContext\":\"变化了\"}\n  </div>)\n}\n\n/**\n * 自定义Hook\n * @param param0 \n */\nconst FriendStatus:React.FC<{id:number}>=({id})=>{\n  const friendList = [\n    { id: 2, name: 'Phoebe' },\n    { id: 40, name: 'Rachel' },\n    { id: 1, name: 'Ross' },\n  ];\n  const [recipientID, setRecipientID] = useState(1);\n  let isOnline=useFriendStatus(recipientID)\n  return (\n    <div className=\"component\">\n      <Title title=\"自定义Hook\" />\n      <select\n        value={recipientID}\n        onChange={e => setRecipientID(Number(e.target.value))}\n      >\n        {friendList.map(friend => (\n          <option key={friend.id} value={friend.id}>\n            {friend.name}\n          </option>\n        ))}\n      </select>\n      {isOnline?<div className=\"online\">在线</div>:<div>不在线</div>}\n      <CountContext.Provider value={isOnline}>\n        <Counters></Counters>\n      </CountContext.Provider>\n    </div>\n  )\n}\n\n\n/**\n * useReducer 组件\n */\nfunction CounterReducer() {\n  type StateType = {\n    count: number,\n    name:string\n  }\n  type ActionType = {\n    type: 'add' | 'reduce' \n    count: number,\n    name?:string\n  }\n  const initialState = { count: 0,name:\"运算\" }\n\n  function reducer(state: StateType, action: ActionType) {\n    switch (action.type) {\n      case 'add':\n        return { name:\"正在进行加法计算\", count: state.count + action.count }\n      case 'reduce':\n        return { name:\"正在进行减法计算\", count: state.count - action.count, }\n      default:\n        return state\n    }\n  }\n  const [state, dispatch] = useReducer(reducer,initialState)\n  return (\n    <div className=\"component\">\n      <Title title=\"useReducer \b对象组件\"/>\n      <p> Count: {state.count}</p>\n      <p>Name:{state.name}</p>\n      <button onClick={() => dispatch({type: 'add',count:20})}>-</button>\n      <button onClick={() => dispatch({type: 'reduce',count:10})}>+</button>\n    </div>\n  );\n}\n/**\n * useRef组件\n */\nconst CounterRef = () => {\n  const [count, setCount] = useState<number>(0)\n  const buttonElement=useRef<HTMLButtonElement>(null)\n  const countRef = useRef<number>(count)\n  useEffect(() => {\n    countRef.current = count\n    console.log(buttonElement)\n  })\n  const handleCount = () => {\n    setTimeout(() => {\n      alert('current count: ' + countRef.current)\n    }, 3000);\n  }\n\n  return (\n    <div className=\"component\">\n      <Title title=\"useRef组件\"/>\n      <p>current count: { count }</p>\n      <button  onClick={() => setCount(count + 1)}>加</button>\n      <button ref={buttonElement} onClick={() => handleCount()}>弹框显示</button>\n    </div>\n  )\n}\n/**\n * useMemo组件\n * \n */\n// 父组件\nconst Example = () => {\n  const [time, setTime] = useState<number>(0)\n  const [random, setRandom] = useState<number>(0)\n\n  return (\n    <div>\n      <Title title=\"useMemo组件\"/>\n      <button onClick={() => setTime(new Date().getTime())}>获取当前时间</button>\n      <button onClick={() => setRandom(Math.random())}>获取当前随机数</button>\n      <Show time={time}>{random}</Show>\n      \n    </div>\n  )\n}\n\ntype Data = {\n  time: number\n}\n\n// 子组件\nconst Show:React.FC<Data> = ({ time, children }) => {\n  function changeTime(time: number): string {\n    console.log('changeTime excuted...')\n    return new Date(time).toISOString()\n  }\n  const newTime: string = useMemo(() => {\n    return changeTime(time)\n  }, [time])\n  useEffect(()=>{\n    console.log(\"124\")\n  },[time])\n  \n  return (\n    <div>\n      <p>Time is: { newTime }</p>\n      <p>Random is: { children }</p>\n    </div>\n  )\n}\n\n/**\n * useCallback组件\n */\nconst UseRefDemof = () => {\n    const [text, updateText] = useState('初始值');\n    const textRef = useRef<string | null>();\n\n    useEffect(() => {\n      textRef.current = text; \n    });\n\n    const handleSubmit = useCallback(() => {\n      const currentText = textRef.current; \n      alert(currentText);\n    }, [textRef]); \n\n    return (\n      <div className=\"component\">\n        <Title title=\"useCallback\"/>\n        <span>父组件：</span>\n        <input value={text} onChange={e => updateText(e.target.value)} />\n        <ExpensiveTree onSubmit={handleSubmit} />\n      </div>\n    );\n}\ninterface Eprops {\n    onSubmit: any\n}\nconst ExpensiveTree:SFC<Eprops>  = React.memo(({onSubmit}) => {\n    console.log('子组件渲染');\n    return (\n        <div>\n            <span>子组件：</span>\n            <button onClick={onSubmit}>点击弹出</button>\n        </div>\n    )\n})\n\nexport {Counter,Article,User,FriendStatus,CounterReducer,CounterRef,Example,UseRefDemof,Title} ","/Users/huo/Desktop/react/hook-ts-demo/src/hooks/useFriendStatus.ts",[],["39","40"],"/Users/huo/Desktop/react/hook-ts-demo/src/view/tab.tsx",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":1,"column":15,"nodeType":"47","messageId":"48","endLine":1,"endColumn":28},{"ruleId":"45","severity":1,"message":"49","line":1,"column":10,"nodeType":"47","messageId":"48","endLine":1,"endColumn":15},{"ruleId":"41","replacedBy":"50"},{"ruleId":"43","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"@typescript-eslint/no-unused-vars","'createContext' is defined but never used.","Identifier","unusedVar","'spawn' is defined but never used.",["52"],["53"],"no-global-assign","no-unsafe-negation"]